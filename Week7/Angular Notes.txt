05-Dec-2022:
============
Angular:
--------

NodeJS Fundamentals:
FREE!!!
Client as well server.
Is a cross-platform JavaScript runtime environment.
It also allows to create Web servers that are scalable.
You can also create console-based and web-based applications using Node.js.

Data Types:
===========
- Boolean
- Undefined
- Null
- String
- Number
- Object
- Function (kind of an data type).

Loose typing:
You don't need to specify the type of data to be stored in a variable.
Use the "var" keyword in NodeJS to declare any type of variable.

Create file named loose_typing.js:
var a =35;
console.log(typeof a);

a = "Hello there";
console.log(typeof a);

a = undefined;
console.log(typeof a);

Objects & Functions:
--------------------
var company = {
	Name: "ajay singala",
	Address: "Boston",
	Contact: "555-123-4567",
	Email: "ajay@singala.com"
};

console.log("Information of the company varialbe is :", company);
console.log("The type of the company varialbe is :", typeof company);

String functions:
=================
+: concat
contact()
charAt()
join()

NPM: Node Package Manager
=========================
Used to manage NodeJS modules for your application.
www.npmjs.com hosts thousands of free packages / modules to download and use.
When you install node.js, npm comes along with it.

What is a package?
It contains all the files required for a modules.
Modules are JS libraries that you can include in your project.
To download any package, just run the npm install command and specify the package name:
C:\npm install uppper-case
Wherever (in whichever folder) you run the npm install command, it will create a folder called "node_modules" and all downloaded packages will be installed in this folder.
Do not include node_modules in your code repo. Make you specify it in the .gitignore so that it is ignored.

Dependencies are listed in the package.json file.
The node_modules older is created based on this file.
Everytime you install a package, it gets listed in this file.

TypeScript (TS):
===========
Typed JavaScript.
It adds types to JS to help you speed up development by catching errors even before you run your JS code.
It is aopn-source programming language built on top of JS.
Works on any browser, any OS, any environment that runs JS.
Developed by Microsoft.

Remember:
- TS is a pre-compiler.
- Browser does not recognize TS.
- Being a pre-compiler, it converts TS code into JS.

TS is just JS.
Supports many JS libraries.
TS is portable.

TS Components:
1. Language.
2. the TS Compiler.
3. The TS Language Service: an additional layer around the core compiler works with the editor providing features like statement completion, formatting, colorization.

To use TS, you need NodeJs installed.
To verify, run:
node -v
npm -v

Install TS by running:
npm install -g typescript

TS compiler as the Transpiler.
Process of converting TS into JS is knows Transpilation / Transpiling.
The compiler is tsc.
tsc -version
tsc --v

To run TSC in VS Code, you may get an error as follows:
tsc : File C:\Users\AjayJayantilalSingal\AppData\Roaming\npm\tsc.ps1 cannot be loaded because running scripts is disabled on this system. For more   
information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.
To remove this error:
- Open Powershell as Admin
- Run the following command:
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
- exit powershell

To compile a TS file:
tsc <filename>.ts
This will generate a .js file with the same filename.
To run, execute with Node:
node <filename>.js
For e.g.;
tsc helloworld.ts
node helloworld.js

TSC by default generates ES3 code.
So, some features of TS may not compile, like defining "Accessors".
To targe ES5 code, run:
tsc <filename.ts> --target ES5

In typical OOP,
interface IPerson {
:
}

class Student : IPerson {
:
}

class Professor
{
}


public string Greeter(IPerson person) {

}

var user = new Student(...);
Greeter(user);		// WORKS!

var prof = new Professor();
Greeter(prof);		// ERROR!

But in TS, it will work!! (interfaces\greeter.ts)

Type System of TS:
- Number
- string
- Boolean
- any
- Enum
- void

Use "extends" to inherit from a class.
class AwesomePerson extends NormalPerson {
    
}

To implement an interface on a class, use "implements":
interface IPerson {
:
}

class AwesomePerson extends IPerson {
:
}

Static variables in a class.
Can be accessed directly using the class name and does not require an instance of the class.

Modules: used to share code between files. External modules.
Namespaces: internal modules.

06-Dec-2022:
============
SPA: Single Page Application.
-----------------------------
A web site / application that dynamically rewrites the current web page with new data from the web server and refresh only part of the page instead of the default behavior of the browser to load new pages.

Gmail, Google Maps, Netflix, AirBnb, Paypal, Pinterest are examples of SPAs.

In an SPA, there is a single page and only parts of the page are updated dynamically.
Advantages of SPA:
1. HTML, CSS, JS files are loaded only once.
2. No extra queries to the server: Only specific data requested is fetched.
3. Fast and Responsive front-end building.
4. Enhanced User Experience.

Angular is a JS-TS-based framework that helps you create SPAs.

Angular History:
----------------
AngularJS a.k.a. Angular v1.0 created by Google in around 2010.
Angular 2.0 Sept-2016.
Angular 4.0 Mar'17
Angular 5 Nov'17
Angular 6 May 2018
Angular 7 Oct'18
Angular 14 Jun'22.
Current version is 15.

Angular is an open source JS framework written in TS.
Google maintains it.
It's primary purpose is to create SPAs.

Features of Angular:
- DOM: manipulate the DOM (html, css etc.).
- TypeScript: more features than pure JS (OO, type-safe variables etc.).
- Data Binding: is a process that enables users to manipulate web page elements through a web browser, by updating HTML elements dynmically.
- Testing: using frameworks like Jasmine and Karma.

Angular Architecture:
=====================
Angular is a full-fledged MVC (Model-View-Controller) framework.

Building blocks of an Angular application:
- Modules: An angular app root module, named AppModule that provides the bootstrapping mechanism to launch the app.
- Components: Each component in the app defines a class that holds the logic of the app and the data. It also defines a part of the UI.
- Templates: It is the HTML markup to be rendered. Contains:
	- Property binding: enables you to interpolate the values that are computed from your app data.
	- Event binding: Lets your app respond to user input.
- Metadata: tells Angular how to process a class.
- Services: these are special classes that are injected into components. Have logic to fetch / manage the data. For e.g.; calling an API.
- Dependency Injection: Used to inject services or other special components into other components for usage.

Installing Angular (ng):
========================
Pre-requisite: Node.js installed

node --version
node -v

npm install -g @angular/cli
ng version

Create a new ng app:
1. Create a new folder for your project (mkdir <foldername>).
2. Navigate to that folder (cd <foldername>)
3. ng new hello-world
4. To run your app:
	cd hello-world
	ng serve
		this will run your app on port 4200 (http://localhost:4200).
		to run on a different port: ng serve --port 5300 ((http://localhost:5300).

By default, your ng app will have an "app" component, which is made up of 4 files:
1. app.component.ts			=> component.
2. app.component.html		=> template.
3. app.component.css		=> Stylesheet.
4. app.component.spec.ts	=> Unit Tests.

Any component you create, will have these 4 files.
A component in Angular is made up of these 4 files.

Application Structure:
1. ROOT HTML - index.html
2. Entry point: main.ts
	Bootstraps the AppModule (app.module.ts)
3. AppModule: app.module.ts: 
@NgModule( {
	declarations: [
		collection of components defined here.
	],
	imports: [
		collection of modules imported and used in the app.
	],
	providers: [
		collection services used in your app. (will be DI'd - dependency injected).
	],
	bootstrap: [AppComponent]
})
export class AppModule {}

4. Root Component: app.component.ts: bootstrap component, first component to run.
5. Additional Components:

ng generate component Person			shortcut: ng g c Person
Person.component.ts
	export class CustomerComponent {}
Person.component.html
Person.component.css
Person.component.spec.ts

Component is like Contoller!!

When creating a new component, the related (4) files will be created in the component's folder inside /src/app/ folder.
So for the above command, it will create a folder /src/app/person, which will have 4 files.

Angular Components are building blocks of the UI of any Angular app.
They are associated with a template (html and css) and a selector.
The component class (.ts file) defines the metadata for the component using the @Component decorator.


The @Component decorator can have the following metadata:
- selector		: identifies the template to be rendered
- template		: the inline-HTML in the .ts file to be rendered for the component.
- templateUrl	: the url to the .component.html
- styles		: the inline-styles for the component.
- styleUrls		: the urls to the component's .css files.

Data Binding:
=============
Is used to manipulate the web page elements and update the page dynamically.
Types of bindings:
- Interpolation
- Attribute binding
- ngModel

Interpolation Binding:
----------------------
Define variable in the component.ts file.
Use it in the component.html file by specifying it between double-curly braces, {{ and }}.

Property Binding:
-----------------
It is a one-way binding mechanism that allows you to set the properties of HTML elements.
Use the square-brackets [] for data binding in the HTML.
Include the property to be set in [] and then provide the variable.
Info flows from component to the view.
	- Define a variable in the component and set it's value.
	- Then assign the variable to a property in HTML (within []).

Event Binding:
--------------
This is when information flows from the view to the component.
For e.g.; a mouse click on a button.
Specify the event within parentheses () without the "on" for the event.
For e.g.;
<button (click)="demo();">Click Me</button>

Two-way binding (ngModel):
--------------------------
Two-way binding mechanism is where data flows from the component to the view and back.
This ensures that both the component and the view are in-sync at all times.
Any changes made on either side will be reflected on the other.
The general syntax to denote a 2-way binding is to use a combo of square brackets and parentheses, [()] and specifying "ngModel" within them followed by the variable to be bound.
To use ngModel, we have to first import and register FormsModule in app.module.ts
import { FormsModule } from '@angular/forms';
:
@NgModule({
  declarations: [
	:
  ],
  imports: [
	:,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})

- class binding: styles, but for dynamically adding or removing CSS classes.
- style binding: one-way binding of CSS styles.

Sharing data between components using @Input and @Output:
---------------------------------------------------------
Angular has 2 decorators @Input and @Output to share data b/w components.
Input specifies which properties on a component you can set from a parent component.
Output identifies the events a component can fire to send the data up the hierarchy to it's parent component.

Create a new project:
ng new inout

Create 2 components
ng g c parent
ng g c child

Angulra - Directives:
---------------------
Structural Directives: change the structure of the DOM by adding or removing elements on the page.
- *ngIf and else
- *ngFor
- *ngSwitch


ng generate component components/character
ng generate class classes/character
ng generate service services/character

Attribute Directives:
- ngStyle
- ngClass
