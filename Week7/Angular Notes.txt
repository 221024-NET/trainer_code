05-Dec-2022:
============
Angular:
--------

NodeJS Fundamentals:
FREE!!!
Client as well server.
Is a cross-platform JavaScript runtime environment.
It also allows to create Web servers that are scalable.
You can also create console-based and web-based applications using Node.js.

Data Types:
===========
- Boolean
- Undefined
- Null
- String
- Number
- Object
- Function (kind of an data type).

Loose typing:
You don't need to specify the type of data to be stored in a variable.
Use the "var" keyword in NodeJS to declare any type of variable.

Create file named loose_typing.js:
var a =35;
console.log(typeof a);

a = "Hello there";
console.log(typeof a);

a = undefined;
console.log(typeof a);

Objects & Functions:
--------------------
var company = {
	Name: "ajay singala",
	Address: "Boston",
	Contact: "555-123-4567",
	Email: "ajay@singala.com"
};

console.log("Information of the company varialbe is :", company);
console.log("The type of the company varialbe is :", typeof company);

String functions:
=================
+: concat
contact()
charAt()
join()

NPM: Node Package Manager
=========================
Used to manage NodeJS modules for your application.
www.npmjs.com hosts thousands of free packages / modules to download and use.
When you install node.js, npm comes along with it.

What is a package?
It contains all the files required for a modules.
Modules are JS libraries that you can include in your project.
To download any package, just run the npm install command and specify the package name:
C:\npm install uppper-case
Wherever (in whichever folder) you run the npm install command, it will create a folder called "node_modules" and all downloaded packages will be installed in this folder.
Do not include node_modules in your code repo. Make you specify it in the .gitignore so that it is ignored.

Dependencies are listed in the package.json file.
The node_modules older is created based on this file.
Everytime you install a package, it gets listed in this file.

TypeScript (TS):
===========
Typed JavaScript.
It adds types to JS to help you speed up development by catching errors even before you run your JS code.
It is aopn-source programming language built on top of JS.
Works on any browser, any OS, any environment that runs JS.
Developed by Microsoft.

Remember:
- TS is a pre-compiler.
- Browser does not recognize TS.
- Being a pre-compiler, it converts TS code into JS.

TS is just JS.
Supports many JS libraries.
TS is portable.

TS Components:
1. Language.
2. the TS Compiler.
3. The TS Language Service: an additional layer around the core compiler works with the editor providing features like statement completion, formatting, colorization.

To use TS, you need NodeJs installed.
To verify, run:
node -v
npm -v

Install TS by running:
npm install -g typescript

TS compiler as the Transpiler.
Process of converting TS into JS is knows Transpilation / Transpiling.
The compiler is tsc.
tsc -version
tsc --v

To run TSC in VS Code, you may get an error as follows:
tsc : File C:\Users\AjayJayantilalSingal\AppData\Roaming\npm\tsc.ps1 cannot be loaded because running scripts is disabled on this system. For more   
information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.
To remove this error:
- Open Powershell as Admin
- Run the following command:
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
- exit powershell

To compile a TS file:
tsc <filename>.ts
This will generate a .js file with the same filename.
To run, execute with Node:
node <filename>.js
For e.g.;
tsc helloworld.ts
node helloworld.js

TSC by default generates ES3 code.
So, some features of TS may not compile, like defining "Accessors".
To targe ES5 code, run:
tsc <filename.ts> --target ES5

In typical OOP,
interface IPerson {
:
}

class Student : IPerson {
:
}

class Professor
{
}


public string Greeter(IPerson person) {

}

var user = new Student(...);
Greeter(user);		// WORKS!

var prof = new Professor();
Greeter(prof);		// ERROR!

But in TS, it will work!! (interfaces\greeter.ts)

Type System of TS:
- Number
- string
- Boolean
- any
- Enum
- void

Use "extends" to inherit from a class.
class AwesomePerson extends NormalPerson {
    
}

To implement an interface on a class, use "implements":
interface IPerson {
:
}

class AwesomePerson extends IPerson {
:
}

Static variables in a class.
Can be accessed directly using the class name and does not require an instance of the class.

Modules: used to share code between files. External modules.
Namespaces: internal modules.

06-Dec-2022:
============
SPA: Single Page Application.
-----------------------------
A web site / application that dynamically rewrites the current web page with new data from the web server and refresh only part of the page instead of the default behavior of the browser to load new pages.

Gmail, Google Maps, Netflix, AirBnb, Paypal, Pinterest are examples of SPAs.

In an SPA, there is a single page and only parts of the page are updated dynamically.
Advantages of SPA:
1. HTML, CSS, JS files are loaded only once.
2. No extra queries to the server: Only specific data requested is fetched.
3. Fast and Responsive front-end building.
4. Enhanced User Experience.

Angular is a JS-TS-based framework that helps you create SPAs.

Angular History:
----------------
AngularJS a.k.a. Angular v1.0 created by Google in around 2010.
Angular 2.0 Sept-2016.
Angular 4.0 Mar'17
Angular 5 Nov'17
Angular 6 May 2018
Angular 7 Oct'18
Angular 14 Jun'22.
Current version is 15.

Angular is an open source JS framework written in TS.
Google maintains it.
It's primary purpose is to create SPAs.

Features of Angular:
- DOM: manipulate the DOM (html, css etc.).
- TypeScript: more features than pure JS (OO, type-safe variables etc.).
- Data Binding: is a process that enables users to manipulate web page elements through a web browser, by updating HTML elements dynmically.
- Testing: using frameworks like Jasmine and Karma.

Angular Architecture:
=====================
Angular is a full-fledged MVC (Model-View-Controller) framework.

Building blocks of an Angular application:
- Modules: An angular app root module, named AppModule that provides the bootstrapping mechanism to launch the app.
- Components: Each component in the app defines a class that holds the logic of the app and the data. It also defines a part of the UI.
- Templates: It is the HTML markup to be rendered. Contains:
	- Property binding: enables you to interpolate the values that are computed from your app data.
	- Event binding: Lets your app respond to user input.
- Metadata: tells Angular how to process a class.
- Services: these are special classes that are injected into components. Have logic to fetch / manage the data. For e.g.; calling an API.
- Dependency Injection: Used to inject services or other special components into other components for usage.

Installing Angular (ng):
========================
Pre-requisite: Node.js installed

node --version
node -v

npm install -g @angular/cli
ng version

Create a new ng app:
1. Create a new folder for your project (mkdir <foldername>).
2. Navigate to that folder (cd <foldername>)
3. ng new hello-world
4. To run your app:
	cd hello-world
	ng serve
		this will run your app on port 4200 (http://localhost:4200).
		to run on a different port: ng serve --port 5300 ((http://localhost:5300).

By default, your ng app will have an "app" component, which is made up of 4 files:
1. app.component.ts			=> component.
2. app.component.html		=> template.
3. app.component.css		=> Stylesheet.
4. app.component.spec.ts	=> Unit Tests.

Any component you create, will have these 4 files.
A component in Angular is made up of these 4 files.

Application Structure:
1. ROOT HTML - index.html
2. Entry point: main.ts
	Bootstraps the AppModule (app.module.ts)
3. AppModule: app.module.ts: 
@NgModule( {
	declarations: [
		collection of components defined here.
	],
	imports: [
		collection of modules imported and used in the app.
	],
	providers: [
		collection services used in your app. (will be DI'd - dependency injected).
	],
	bootstrap: [AppComponent]
})
export class AppModule {}

4. Root Component: app.component.ts: bootstrap component, first component to run.
5. Additional Components:

ng generate component Person			shortcut: ng g c Person
Person.component.ts
	export class CustomerComponent {}
Person.component.html
Person.component.css
Person.component.spec.ts

Component is like Contoller!!

When creating a new component, the related (4) files will be created in the component's folder inside /src/app/ folder.
So for the above command, it will create a folder /src/app/person, which will have 4 files.

Angular Components are building blocks of the UI of any Angular app.
They are associated with a template (html and css) and a selector.
The component class (.ts file) defines the metadata for the component using the @Component decorator.


The @Component decorator can have the following metadata:
- selector		: identifies the template to be rendered
- template		: the inline-HTML in the .ts file to be rendered for the component.
- templateUrl	: the url to the .component.html
- styles		: the inline-styles for the component.
- styleUrls		: the urls to the component's .css files.

Data Binding:
=============
Is used to manipulate the web page elements and update the page dynamically.
Types of bindings:
- Interpolation
- Attribute binding
- ngModel

Interpolation Binding:
----------------------
Define variable in the component.ts file.
Use it in the component.html file by specifying it between double-curly braces, {{ and }}.

Property Binding:
-----------------
It is a one-way binding mechanism that allows you to set the properties of HTML elements.
Use the square-brackets [] for one-way data binding in the HTML.
Include the property to be set in [] and then provide the variable.
Info flows from component to the view.
	- Define a variable in the component and set it's value.
	- Then assign the variable to a property in HTML (within []).

Event Binding:
--------------
This is when information flows from the view to the component.
For e.g.; a mouse click on a button.
Specify the event within parentheses () without the "on" for the event.
For e.g.;
<button (click)="demo();">Click Me</button>

Two-way binding (ngModel):
--------------------------
Two-way binding mechanism is where data flows from the component to the view and back.
This ensures that both the component and the view are in-sync at all times.
Any changes made on either side will be reflected on the other.
The general syntax to denote a 2-way binding is to use a combo of square brackets and parentheses, [()] and specifying "ngModel" within them followed by the variable to be bound.
To use ngModel, we have to first import and register FormsModule in app.module.ts
import { FormsModule } from '@angular/forms';
:
@NgModule({
  declarations: [
	:
  ],
  imports: [
	:,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})

- class binding: styles, but for dynamically adding or removing CSS classes.
- style binding: one-way binding of CSS styles.

Sharing data between components using @Input and @Output:
---------------------------------------------------------
Angular has 2 decorators @Input and @Output to share data b/w components.
Input specifies which properties on a component you can set from a parent component.
Output identifies the events a component can fire to send the data up the hierarchy to it's parent component.

Create a new project:
ng new inout

Create 2 components
ng g c parent
ng g c child

Angulra - Directives:
---------------------
Structural Directives: change the structure of the DOM by adding or removing elements on the page.
- *ngIf and else
- *ngFor
- *ngSwitch


ng generate component components/character
ng generate class classes/character
ng generate service services/character

07-Dec-2022:
============
Attribute Directives: they change the behavior or appearance of DOM elements.
- ngStyle
- ngClass
- ngModel

ng generate class classes/user --skip-tests=true	// Will not generate the .spec.ts file.
ng g c components/AttrDirectives

Two-way binding for a dropdown:
ng generate class classes/product --skip-tests=true
ng g c components/dropdown

The <select> element has an onchange event that triggers every time you change the selection on a dropdown.
<select onchange="foo();">
In angular, bind a method to the (change) event.
<select (change)="foo()">

Angular - DI (Dependency Injection):
------------------------------------
Used for injecting services into components.
For e.g.; you will have to create a service in Angular that will consume an API (written in any other language).
To use this service in a ng component, you have to make sure it is "injected" first (registered) so that it cdna be used by any component in your project.
You register the service in the app.module.ts file under the "providers" section of the @NgModule decorator.
@NgModule({
  declarations: [
	<components>,
	:
  ],
  imports: [
	<modules>,
	:
  ],
  providers: [
	<services>,
	:
  ],
  bootstrap: [AppComponent]
})

Or specify the DI in the service itself in the "providedIn" property of the @Injectible directive:
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class LoggerService {
	:
	:
}

To create a service, run the command:
ng generate service <service_name>
This will generate a .ts file with a class and a decorator @Injectable.

1. Create a new project: ng new <project_name>
2. cd <project_name>
3. ng serve
4. Run:
ng generate service services/logger
OR
ng g s services/logger

Creating a custom directive:
ng generate directive directives/highlight

Creates a class with the decorator @Directive.
A directive is like a component, but without the template (.html).

Angular - HttpClient:
=====================
The front-end app has to communicate with back-end services, like APIs, to get / send data over HTTP.
Calling APIs is actually done using the XmlHttpRequest object.
In ng, we use the HttpClient to make calls to APIs.
It's abuilt-in "service", and since it is a service, it will have to be injected so that it can be used in any service that we create in our project.

In ASP.NET Web API, the APIs were by default async and using async-await mechanism for the API methods (web methods).
In ng, to make async calls to the API service, we use RxJS Observables.
an Observable is very similar to a Promise in JS and it helps manage async code.
It is not part of core JS, but it is from a very popular obervable library RxJS, i.e.; "Reactive eXtension for JavaScript".
When using HttpClient to make API calls, you have to remember certain steps as it returns observables:
- You subscribe to an API call and it will initiate the request. If you do not subscribe, nothing will happen.
- When get() request (or any request) returns successful, the observable emits the result back and is then complete.
- When get() request (or any request) fails, the observable emits the error.

ng new httpclient-app
ng generate service services/Http

GET https://jsonplaceholder.typicode.com/posts			Get all posts
GET https://jsonplaceholder.typicode.com/posts/1		Get a post.
POST https://jsonplaceholder.typicode.com/posts			Create a new post.
	- you pass the data in the body of the request.
PUT https://jsonplaceholder.typicode.com/posts/1		Update a post.
	- you pass the data in the body of the request.
DELETE https://jsonplaceholder.typicode.com/posts/1		Deletes a post.


GET https://jsonplaceholder.typicode.com/products			Get all products.
GET https://jsonplaceholder.typicode.com/products/1		Get a product.
POST https://jsonplaceholder.typicode.com/products			Create a new product.
	- you pass the data in the body of the request.
PUT https://jsonplaceholder.typicode.com/products/1		Update a product.
	- you pass the data in the body of the request.
DELETE https://jsonplaceholder.typicode.com/products/1		Deletes a product.

ng generate service services/HttpCrudDemo

ng generate interface interfaces/BaseUser
ng generate class classes/User
ng generate service services/User

Pipes:
======
ng new pipes-app
ng g c components/pipes

In slicing, [start:end], it goes from the "start" index, upto "end" index minus 1.
INDEXING STARTS FROM 0 and not 1.
Fruits = ["apple", "Orange", "Grapes", "Mango", "Kiwi", "Watermelon"];
For [1:4] -> from 1 to 3 Orange, Grapes, Mango
For [2:7] -> from 2 to 6
Negative index means start from the end. Does not start from 0 or -0. It starts from -1. -1 is the last element.
[-2] will give the last 2 elements of the array. Kiwi, Watermelon
[-4:-2]: Grapes, Mango

ng generate pipe pipes/DigitCount

Angular Routing:
================
angulra Router is a powerful JS library buit for routing created and maintained by the Angular team.
Part of the @angular/router package.
The library provides a complete routing feature router outlets, path matching strategies and access to route parameters.

<router-outlet></router-outlet>:
--------------------------------
It is a directive part of this library.
Where it is specified in the template, renders the component that gets matched based on the browser's url.

Routes and Path:
-----------------
We map a path to a component (a redirect to a path).
For e.g.:
{ path: 'contacts', component: ContactListComponent }
So, http://localhost:4200/contacts will render the ContactListComponent's template.

And these mappings are to be provided a file named app-routing.module.ts

{path: '', pathMatch: 'full', redirectTo: 'contacts'}  
So, the url http://localhost:4200 will redirect to the "contacts" path and render the ContactListComponent's template.
So, http://localhost:4200 will be same as http://localhost:4200/contacts.

Creating a fake api:
In your project folder:
npm install --save angular-in-memory-web-api


Forms:
======
Forms are used for handle user data.
Two types:
- Template Driven Forms
- Reactive Forms

Template Driven Forms:
----------------------
Created using directives in the template.
Mainly used to create simple form application.

ng new forms-app
import FormsModule in app.module.ts
ng g c components/form

Reactive Forms:
---------------
Created inside component class, hence also referred to as model-driven forms.
Every form control will have an object available in the component. This provides greater control and flexibility on the behavior of the form and ability to program the form.
Reactive Forms are based on structured data model.

import ReactiveFormsModule in app.module.ts

Reactive Forms concepts:
- FormControl: Defines the basic functionality of an individual form control.
- Form Group: Used to aggregate the values of a collection form control.
- FormArray: Used to aggregate the values of form control into an Array.
- ControlValueAccessor: Acts as an interface between the Forms API to HTML DOM elements.

ng g c components/ReactiveForm

ng g c components/hero-form


Unit Testing:
============

Deploy Angular Apps:
====================
