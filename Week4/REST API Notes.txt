HTTP: HyperText Transfer Protocol.
Standardized way for computers to communicate with each other.
Allows fetching of resources (HTML documents).
HTML can contain: text, sub-documents, layout descriptions, images, videos etc.

Connectionless:
When a request is sent, the client (usually a browser) opens the connection, once a response is received, the client closes the connection.

The client and the server only maintain a connection during the request and response.
Future requests are made on a new connection.

Stateless: There is no dependency between successive requests.
Not Sessionless: Utilizes headers and cookies to create sessions to allow HTTP requests to share the same context.
Media Independent: any type of data can be sent over HTTP as long as both the client and the server know how to handle the format: text, images, videos, XML, JSON, (serialized) objects.

HTTP Request and Response:
HTTP Request:
	- is sent from the client to the server to initiate some operation.
	- Requires a URL (Uniform Resource Locator) for e.g., www.linkedin.com
	- Have other elements as well:
	
Method: Defines what operation is to be formed.
	GET, POST, PUT, DELETE
Path: the URL (location or address) of the resource being requested.
	URL gets converted into an IP address 123.45.67.89
HTTP Headers:
	- optional information.
	- Content-Type (json, xml, etc.)
Body:
	- optional information.
	- usually used with POST and PUT methods.

HTTP Request Methods:
GET: Only retrieves data for the requested resource.
	- GET: www.mysite.com/customers
	- GET: www.mysite.com/customers/101
	Nothing in the body.
POST: Send data to the server to create new resource.
	- POST: www.mysite.com/customers
		BODY: firstname, lastname, address, city, state, zip, phone, email...
PUT: Modify existing data for a specific resource.
	- PUT: www.mysite.com/customers/246
		BODY: firstname, lastname, address, city, state, zip, phone, email...
DELETE: Delete an existing resource.
	- DELETE: www.mysite.com/customers/246
	Nothing in the body.

HTTP Responses:
Informs the client about the outcome of the requested operation.
Responses also have elements:
Header: Date, Content-Type.
Body: optional, contains requested data.
Status Codes:
	- 5 categories of status codes:
		- 100 Information.
		- 200 Success.
			- 200 OK
			- 201 Created.
		- 300 Redirection.
		- 400 Client Error.
			- 401 Unauthorized.
			- 404 Not found.
		- 500 Server Error.
			- 500 Internal server error.
			
URL:
http://www.example.com/customers?id=764
Here:
- http:// - protocol
	- https://www.example.com/customers?id=764
	- HTTPS: HTTP secured. Everything in the request is encrypted.
- www.example.com - Domain name or IP address
- customers - path
- ?id=764 - Query String
	- http://www.example.com/customers?id=764&firstname=john&lastname=smith

OR
URL:
	- www.mysite.com/customers/246

API:
====
Application Programming Interface.
Client-server applications
Request a web page:
	- https://www.example.com/customers/details.html?id=246

Web APIs: are web based applications without a UI.
	- You build the UI and make calls to the API to fetch / add / updated / delete data.
	
	
17-Nov-2022:
============
REST: REpresentational State Transfer

Web API: assumed that it is a RESTful API REST API.

Six guiding Principles:
=======================
1. Uniform Interface:
i) easy to identify resources.
http://localhost:8765/categories
http://localhost:8765/categories/101
http://localhost:8765/users
http://localhost:8765/users/207
http://localhost:8765/products
http://localhost:8765/products/607

ii) manipulation of resources through representations.
GET http://localhost:8765/categories
GET http://localhost:8765/categories/101
POST http://localhost:8765/categories
PUT http://localhost:8765/categories/101
DELETE http://localhost:8765/categories/101

iii) Self-descriptive messages.

iv) Hypermedia as the engine of application state.
The client app only needs the initial uri of the api application.
The API app should dynamically drive all other resources with the use of hyperlinks.

2. Client-Server:
Enforces "separation of concerns" (SoC).
Each layer / module / project / package will only do what it is supposed to do and nothing else.
Client will only perform "client" operations without worrying about where the data is stored and how to access it.
Server will perform "backend activities" like accessing the DB, performing complex logic, processing the data etc. and not worry about how to "render" the data.

3. Stateless:
Each request from the client to the server must contain all information that is required by the server to complete the request.

4. Cacheable:
What is Caching?

5. Layered System:
Architecture of the API is made up of hierarchical layers.

CORRECT: API calls the Repository which connects to the DB.
WRONG: API has the code to connect to the DB.

6. Code on demand (optional).

What is a Resource?
-------------------
Any information that we can name can be a resource.
For e.g., customer, employee, product, image, video, collection of products etc.
The state of the resource at any given particular time is known as the "resource representation".
The resource representation can be:
- the data.
- any metadata describing the data.
- any hypermedia links that can help clients (client apps) transition to the next state.

A REST API consits of an assembly of interlinked resources.

POST http://localhost:6643/categories
	returns location: http://localhost:6643/categories/453
	
GET http://localhost:6643/categories/453
{
	"id": 453,
	"name": "Electronics",
	"descriptipon": "Electronic items",
	"image": "http://localhost:6643/categories/image/453"
}
 
This will return the imgae of the specific resource (category id 453 in this case).
GET http://localhost:6643/categories/image/453

This set of interlinked resources is known as REST API's "resource model".

Resources can be accessed using "resource methods", which are GET POST PUT and DELETE.
GET http://localhost:8765/categories
GET http://localhost:8765/categories/101
POST http://localhost:8765/categories
PUT http://localhost:8765/categories/101
DELETE http://localhost:8765/categories/101

REST and HTTP are not the same.
- REST works on HTTP.

REST - HATEOAS
Hypermedia as the Engine of Application State.

GET http://localhost:4321/departments/10
{
	"departmentId": 10,
	"departmentName": "Admin",
	"location": "Dallas",
	"managerId": 110,
	"links":
	[
		{
			"href": "departments/employees/10",
			"relation": "employees",
			"type": "GET"
		}
	]
}

GET http://localhost:4321/departments/employees/10
[
	{
		"employeeId": 123,
		"name": "John",
		"link": "employees/123"
	},
	{
		"employeeId": 456,
		"name": "Mary",
		"link": "employees/456"
	}
]

GET http://localhost:4321/employees/123
{
	"employeeId": 456,
	"name": "Mary",
	"address": "...",
	"city": "....",
	:
	"photo": "employees/image/456"
}

Hypermedia any content that has links to other forms of media such as image, video, text, any resource.
