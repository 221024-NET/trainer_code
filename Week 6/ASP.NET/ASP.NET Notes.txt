01-Dec-2022:
============
Service Oriented Architecture (SOA):
------------------------------------
Providing functionality as a service to applications.

Web Services: Based on certain W3C standards.
Limitations: compatibility with other platforms. If a web service was created in .NET, it was not 100% compatible with Java. and vice versa.

SOA Principles:
1. Stardardized service contract and description.
2. Loose coupling.
3. Service Abstraction: hide the logic from the outside world.
4. Service reusability.
5. Service autonomy: The service should have control over the logic that is encapsulated (hidden) within the service.
6. Service statelessness: ideally, services should be stateless. They should not withold any information from one state (request) to the other. Every request must sent relevant required data to the service for it to perform it's action properly.
7. Service discoverability: Clients (apps) should be able to discover the service.
	www.myapi.com/swagger/ui/index.html
8. Service composability: break big problems into smaller ones. Instead of providing a single service (API) with many methods, create separate services for the components.
9. Service interoperability: Services should be compatible and accessible from diverse subscribers (clients). Based on standards: HTTP-based, XML/JSON.

SOA Terminologies:
1. Service consumer: the client that consumes the service (api).
2. Service registry: Repository where services are registered and become discoverable.
3. Service provider: the creator (generator) of the service.

SOA Advantages:
- Service resuability.
- platform independent.
- easy maintenance.
- availability.
- Parallel development.
- Scalability.

SOA Disadvantages:
- SOA depends on standards.
- SOA is not meant for applications that have a very high level of data transfer.
- SOA is about knowing the business process properly.
	
ASP.NET Core:
=============
- ASP: Active Server Pages by Microsoft.
	- .asp files.
	- all your code for a page in a single .asp file.
		- html, server business logic, db connectivity etc.
- .NET and ASP.NET
	- bifurcated the UI (HTML) and code-behind (C# or VB.NET).
	- a page would be a combination of:
		- .aspx file (HTML).
		- a .aspx.cs (or .aspx.vb) file (code-behind, logic).
			- login.aspx and login.aspx.cs
		- class libraries - for the BL and DAL and use these from the .aspx.cs file.
- ASP.NET Web Services:
	- web pages but without UI.
	- .ascx and .ascx.cs files
		- customer.ascx and customer.ascx.cs
			- web methods for the "customer" component.
				- Login()
				- Register()
				- GetCustomerDetails()
- .NET Core and ASP.NET Core
	- .NET when it started, the aim was to have it work across platforms, not just on Windows.
	- But there were lots of issues with that.
	- Lot of code in the .NET Framework that was dependent on the Windows O/S and architecture.
	- Over a period of time, .NET became platform independent like Java and was called ".NET Core".
	
	
Create a web app:
=================
VS: New -> Project -> ASP.NET Core Web App
VSC:
Command line (VSC Terminal Window):
cd \dotnet_projects
dotnet new webapp -o aspnetcoreapp_vsc
dotnet dev-certs https --trust

Razor Syntax:
Server side code.
Starts with the @ symbol.

ViewData["title"] = "some title";
ViewData is a built-in "bag" available in .NET to share data between the server code (.cs) and the HTML page.
Used to store any kind of data to share between UI and code-behind.

MVC: Model-View-Controller: Design Pattern:
===========================================
All controllers inherit from the built-n base class "Controller".
URL of a MVC-based application will be as:
http://server.com/controller/action
http://server.com/home/index
http://server.com/home/privacy

In the Action method of the Controller, there is return View();
What this does is, renders the view for that specific action.
View name must match the action name.
So, if action name is "Index",  view is Index.cshtml.
So, if action name is "About",  view is About.cshtml.
So, if action name is "Order",  view is Order.cshtml.

The views for a controller have to be in a specific folder of that controller within the Views folder.
So, for a controller named HomeController and actions Index, About, there will be folders+files as follows:
Views
	Home
		Index.cshtml
		About.cshtml
So, for a controller named ProductController and actions Index, DisplayDetails, there will be folders+files as follows:
Views
	Product
		Index.cshtml
		DisplayDetails.cshtml
ALL controllers must be created in the Controllers folder only.

Components of ASP.NET (Core):
Program.cs
Dependency Injection (DI).
Middleware.
Configuration (appsettings.json).
Environments.
	DEV, TEST, PROD
Logging
Routing

ASP.NET Core Web API:
Controller inherits from the built-in class "ControllerBase".

EntityFramework (EF) Core:
==========================
EF is an ORM.
ORM = Object Relation Mapping.

Hibernate: Java-based ORM used in Java apps to handle database operations in a Java app.
	- Create a model (entity class).
	- Map it to a database. 
	- Configure the connection.
	- That's it!
	- No need a single QUERY (SELECT, INSERT, UPDATE, DELETE).
	- make calls on the ORM object.
		- customers.Create(), customers.Find(), customers.Save()
	- You don't write the Queries.
	- The ORM will do it for you internally.
	- Even for complex queries with joins between tables, the ORM generates the query internally.
	
NHibernate: .NET-based applications.

Microsoft create it's ORM called EntityFramework.
Which is now EntityFramework Core.

Create a web api using Visual Studio Code:
1. Create the API project:
dotnet new webapi -o TodoApi

2. Add EntityFramework NuGet package to the project.
cd TodoApi
In VSC:
dotnet add package Microsoft.EntityFrameworkCore.InMemory

In VS Package Manager Console:
Install-Package Microsoft.EntityFrameworkCore.InMemory	

3. Add a database context.
- The class where EF commmunicates with the DB.
- We define all the entities mapped to the DB tables.

4. Register the DB Context class in Program.cs
5. Scaffold a controller (create a controller based on the model).

dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet tool install -g dotnet-aspnet-codegenerator
dotnet aspnet-codegenerator controller -name TodoItemsController -async -api -m TodoItem -dc TodoContext -outDir Controllers

Create Web Api with EF Core Migrations (Code First approach):
=============================================================
VS:
Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design
Install-Package Microsoft.EntityFrameworkCore.Design
Install-Package Microsoft.EntityFrameworkCore.SqlServer
dotnet tool install -g dotnet-aspnet-codegenerator
Install-Package Microsoft.EntityFrameworkCore.Tools

Create model class(es).
Create DB Context class.
	- Define Entities in the context class.
Run these commands:
	Add-Migration <name>
	Update-Database			// Make changes to the DB.

If you make changes to the model (create a new model, update an existing model), run migrations again:
	Add-Migration <new_name>
	Update-Database

EF with DB First Approach:
==========================
Configure the connection string in appsettings.json
Create the model classes - exactly as per the existing DB tables.
Create the DB Context class
	- add the entities to the db context class
Register the DB Context class as a service (DI) in Program.cs
Create api controller & repository.

02-Dec-2022:
============
Generate Controller:
--------------------
Controller Action return types - Web App
Controller Action return types - Web API

Routes:
-------

Data Annotations:
-----------------
//[Table("Emp")]
public class Employee
{
	//[Column("employee_identifier")]
	//[Key]
	public long EmployeeId { get; set; }

	//[Column(TypeName = "NVARCHAR(MAX)")]
	[Required]
	//[StringLength(50)]
	public string Firstname { get; set; }

	//[StringLength(50, ErrorMessage = "Lastname must be less than 50 characters")]
	//[StringLength(50, ErrorMessage = "Lastname must be less than 50 characters", MinimumLength = 5)]
	public string Lastname { get; set; }
	public DateTime DateOfBirth { get; set; }
	//[Phone]
	public string PhoneNumber { get; set; }
	//[MaxLength(5)]
	//[EmailAddress]
	public string Email { get; set; }
	public string Gender { get; set; }

	//[Url]
	public string WebSite{ get; set; }

	//[NotMapped]
	//public string Dummy { get; set; }

	//[Column(TypeName = "decimal(5,2)")]
	//public decimal Rating { get; set; }

	//[Range(1,199)]
	//public decimal Price { get; set; }
}

ASP.NET Filters
---------------
Filters are code that run before or after specific stages in HTTP request-response lifecycle.
Built-in filters:
	Authorization Filters:
		- runs first.
		- Determine if the user is authorized to make the request.
	Resource Filters:
		- runs after authorization.
		- OnResourceExecuting runs before the request pipline initiates.
		- OnResourceExecuting runs after the pipeline has completed.
	Action Filters:
		- run immediately before and after an action method is called.
		- Can change the arguments passed to the action.
		- Can change the result returned from the action.
	Exception Filters:
		- take care of unhandled exceptions.
	Result
		- Run immediately before and after action results are executed.
		- Run only when the action executes successfully.
		- Usually used to format views or data before it is rendered by the view.
	Caching
		- for caching of data.
Custom filters can be created.


ASP.NET Caching
---------------
var result = null;
if(anObject == null) 
{
	throw exception
}
else 
{
	result = anObject;
}

instead:
var result = anObject ?? throw exception;

DTOs: Data Transfer Objects
Your entity (model) may have 25 fields (25 columns).
From the API, you want to only return 10 fields.
If you return the DbContext model object, you will end up returning all the fields OR manually setting field values to null or zero or dummy data.
Instead, use DTOs.
Create a DTO and include those fields that are required to be passed back.

The IMemoryCache object is like a map, having key-value pairs.

SlidingExpiration: Determines how long a cache entry can be inactive before it is remove from the cache. Should be a lower value, like a minute or two minutes.
At 10:10 Products list is requested.
SlidingExpiration will be 10:13.
At 10:11 someone requests the products list.
SlidingExpiration will be 10:14.
If no one access products list til l0:15, the list is removed from cache.

AbsoluteExpiration: The problem with SlidingExpiration is it never expires if the object is frequently accessed. What if new products are added, or existing products deleted or modified? Should be a higher value, like 1 hour.

Priority: Normal, Low, High, Never Remove.
Size: just a number. size of the cached object.

CORS:
-----
Cross-Origin Resource Sharing.
1. In Program.cs, you add the CORS service and define a policy:
var TodoOrigins = "_todoOrigins";
builder.Services.AddCors(options =>
{
    options.AddPolicy(name: TodoOrigins,
                        policy =>
                        {
                            policy.WithOrigins("http://localhost:4200")
                                .AllowAnyHeader()
                                .AllowAnyMethod();
                        });
});

builder.Services.AddCors(options =>
{
    options.AddPolicy(name: "anotherOrigin",
                        policy =>
                        {
                            policy.WithOrigins("http://localhost:7654")
                                .AllowAnyHeader()
                                .WithMethod(<list of methods allowed>);
                        });
});

To allow anyone to access the API, use policy.AllowAnyOrigin():
var TodoOrigins = "_todoOrigins";
builder.Services.AddCors(options =>
{
    options.AddPolicy(name: TodoOrigins,
                        policy =>
                        {
                            policy.AllowAnyOrigin()
                                .AllowAnyHeader()
                                .AllowAnyMethod();
                        });
});

2. Activate the CORS policy that is defined in step 1 above:
app.UseCors(TodoOrigins);
app.Run();

LINQ:
-----

